from datetime import *


def week_type(job, code): # determine what week we're working with
   week_type = input("Base or Strange b/s? ")
   if week_type == 'b':
       res = calculate_base()
  
   elif week_type == 's':
       res = calculate_strange(job, code)


   return res


def calculate_base(): # calculate total hours for base work week
   hours = get_hours()
   total = 0
  
   start = hours[0]
   end = hours[1]


   diff = end - start
  
   if diff.total_seconds() >= 21600:
       diff = diff.total_seconds() - 1800


   res = diff / 3600
   total += res


   return total * 5


def calculate_strange(): # calculate total hours for strange work week#
  
   while True:
       hours = get_hours()
       total = 0


       start = hours[0]
       end = hours[1]


       total = end - start #get hours of current job on current day
       day_data[i].append(total.total_seconds() / 3600)


       cont = input("New Job or Next Day? (j/d)")




def get_job(): # check if job is in list and return it
  
   jobs = {}
   num = input("Enter Job#: ")
  
   with open("job_list_test.txt", "r") as job_list:
       data = job_list.readlines()


       for line in data:
           key, value = line.strip().split(maxsplit = 1)
           jobs[int(key)] = value.strip()
  
   if int(num) in jobs:
       return (f"{num} - {jobs[int(num)]}")


def get_code(): # get code and return it
   code = input("Enter Labor Code: ")
   return code


def get_name(): # check if name is in list and return it
   name = input("Enter Employee: ")


   with open("name_list_test.txt", 'r') as file:
       data = file.readlines()
       file.close()
  
   for names in data:
       if name in names:
           return name


def add_name(): # add new name to list
   pass


def add_job(): # add new job to list
   hours = get_hours()
   total = 0
  
   start = hours[0]
   end = hours[1]


   diff = end - start
  
   if diff.total_seconds() >= 21600:
       diff = diff.total_seconds() - 1800


   res = diff / 3600
   total += res


   return total




def get_hours(): # start and end times at job
   start = input("enter start in military time: ")
   end = input("enter end in military time: ")
          
   start_time = datetime.strptime(start, "%H:%M")
   end_time = datetime.strptime(end, "%H:%M")


   return [start_time, end_time]




def main(): # calls job, name, LC
  
   worker_data = []


   while True:
       info_string = {}


       name = get_name()
       job = get_job()
       code = get_code()
       hours = week_type(job, code)


       info_string[name] = [job, code, hours]
       worker_data.append(info_string)


       cont = input("Enter another? ")
       if cont != 'y':
           break


   print(worker_data)


main()

